{"mbpp":{"fp16":{"summary":{"energy_per_token":1.0346867472765564,"accuracy":0,"carbon_emissions":10.053706227703874,"total_examples":10,"avg_energy":32.903038563394496,"avg_time":0.6559143304824829},"examples":[{"stats":{"components":{"embeddings":0.4652470278739929,"attention":8.50546296334121,"ffn":11.028494139677496,"layernorm":0.3159266157150269,"output_layer":4.536999999996624},"num_tokens":35,"total_energy":30.890284558775836,"tokenization_energy":0.16228455877304077,"inference_energy":30.728000000002794,"energy_per_token":0.8825795588221668,"time":0.8039395809173584},"prompt":"\n                <｜begin▁of▁sentence｜><｜User｜>output only the code, no explanation: Write a python function to remove first and last occurrence of a given character from the string.<｜Assistant｜><think>\n                ","ground_truth_code":"def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ","generated_code":")\n\n</think> )\n\n\n\n\n\n\n the number.\n\n no explanation\n\n  a function function that compute all occurrence last character of a character number in a string.\n\n The<think>\nOkay First","test_cases":["assert remove_Occ(\"hello\",\"l\") == \"heo\"","assert remove_Occ(\"abcda\",\"a\") == \"bcd\"","assert remove_Occ(\"PHP\",\"P\") == \"H\""],"is_correct":false},{"stats":{"inference_energy":31.631999999997788,"energy_per_token":0.8819518457650524,"time":0.6341044902801514,"components":{"embeddings":0.1177453064918518,"attention":20.93098932957917,"ffn":18.012907232517374,"layernorm":0.13177346348762511,"output_layer":0.8790678656101226},"num_tokens":36,"total_energy":31.750266447541886,"tokenization_energy":0.11826644754409789},"prompt":"\n                <｜begin▁of▁sentence｜><｜User｜>output only the code, no explanation: Write a function to sort a given matrix in ascending order according to the sum of its rows.<｜Assistant｜><think>\n                ","ground_truth_code":"def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result","generated_code":")\n\n</think> )\n\n\n\n\n\n\n the number.\n\n no explanation\n\n  a function that compute a list array in ascending order, to the second of each elements. If<think>\nOkay First","test_cases":["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]","assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]","assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"],"is_correct":false},{"generated_code":")\n\n</think> )\n\n\n\n\n\n\n the number.\n\n no explanation\n\n  a function that compute the number frequent words in a given, The<think>\nOkay Okay","test_cases":["assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]","assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]","assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"],"is_correct":false,"stats":{"tokenization_energy":0.12917787194252014,"inference_energy":30.81500000000233,"energy_per_token":1.031472595731495,"time":0.6182606220245361,"components":{"ffn":21.649447941065883,"layernorm":0.13218481063842774,"output_layer":0.6850759055614472,"embeddings":0.12758512258529664,"attention":10.603008521557612},"num_tokens":30,"total_energy":30.94417787194485},"prompt":"\n                <｜begin▁of▁sentence｜><｜User｜>output only the code, no explanation: Write a function to count the most common words in a dictionary.<｜Assistant｜><think>\n                ","ground_truth_code":"from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"},{"test_cases":["assert find_Volume(10,8,6) == 240","assert find_Volume(3,2,2) == 6","assert find_Volume(1,2,1) == 1"],"is_correct":false,"stats":{"time":0.7409436702728271,"components":{"ffn":17.39307088947785,"layernorm":0.13481275367736817,"output_layer":0.6945343284606933,"embeddings":0.17489525198936462,"attention":10.538426328420757},"num_tokens":30,"total_energy":41.766462250473964,"tokenization_energy":0.12746225047111512,"inference_energy":41.63900000000285,"energy_per_token":1.392215408349132},"prompt":"\n                <｜begin▁of▁sentence｜><｜User｜>output only the code, no explanation: Write a python function to find the volume of a triangular prism.<｜Assistant｜><think>\n                ","ground_truth_code":"def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ","generated_code":")\n\n</think> )\n\n\n\n\n\n\n the number.\n\n no explanation\n\n  a function function that compute the number of a rectangular prism.\n\n The<think>\nOkay First"},{"stats":{"time":0.6658065319061279,"components":{"layernorm":0.13160241055488586,"output_layer":0.6923950910568237,"embeddings":0.7770458114147186,"attention":19.6293351404696,"ffn":10.240907035583515},"num_tokens":28,"total_energy":29.363047980546195,"tokenization_energy":0.2060479805469513,"inference_energy":29.156999999999243,"energy_per_token":1.048680285019507},"prompt":"\n                <｜begin▁of▁sentence｜><｜User｜>output only the code, no explanation: Write a function to split a string at lowercase letters.<｜Assistant｜><think>\n                ","ground_truth_code":"import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))","generated_code":")\n\n</think> )\n\n\n\n\n\n\n the number.\n\n no explanation\n\n  a function that compute a string into the letters, So<think>\nOkay Okay","test_cases":["assert split_lowerstring(\"AbCd\")==['bC','d']","assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']","assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"],"is_correct":false},{"generated_code":")\n\n</think> )\n\n\n\n\n\n\n the number.\n\n no explanation\n\n  a function that compute the of consecutive letters in by spaces equal, The<think>\nOkay Okay","test_cases":["assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')","assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')","assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"],"is_correct":false,"stats":{"inference_energy":36.55599999999686,"energy_per_token":1.1834248476488882,"time":0.620114803314209,"components":{"attention":9.775572666409193,"ffn":6.716242706298829,"layernorm":0.13041595745086668,"output_layer":0.7333540029525756,"embeddings":5.618999999998778},"num_tokens":31,"total_energy":36.68617027711554,"tokenization_energy":0.13017027711868287},"prompt":"\n                <｜begin▁of▁sentence｜><｜User｜>output only the code, no explanation: Write a function to find sequences of lowercase letters joined with an underscore.<｜Assistant｜><think>\n                ","ground_truth_code":"import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"},{"ground_truth_code":"def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter","generated_code":")\n\n</think> )\n\n\n\n\n\n\n the number.\n\n no explanation\n\n  a function that compute the maximum of a triangle when The<think>\nOkay I","test_cases":["assert square_perimeter(10)==40","assert square_perimeter(5)==20","assert square_perimeter(4)==16"],"is_correct":false,"stats":{"time":0.6162228584289551,"components":{"embeddings":0.1787729344367981,"attention":5.073156959772111,"ffn":6.9479675438404085,"layernorm":0.13011436271667481,"output_layer":0.720137357711792},"num_tokens":28,"total_energy":30.719499643087854,"tokenization_energy":0.18149964308738709,"inference_energy":30.538000000000466,"energy_per_token":1.0971249872531377},"prompt":"\n                <｜begin▁of▁sentence｜><｜User｜>output only the code, no explanation: Write a function to find the perimeter of a square.<｜Assistant｜><think>\n                "},{"prompt":"\n                <｜begin▁of▁sentence｜><｜User｜>output only the code, no explanation: Write a function to remove characters from the first string which are present in the second string.<｜Assistant｜><think>\n                ","ground_truth_code":"NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ","generated_code":")\n\n</think> )\n\n\n\n\n\n\n the number.\n\n no explanation\n\n  a function that compute duplicate from a string half of appear also in the second string. Make<think>\nOkay Well","test_cases":["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'","assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'","assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "],"is_correct":false,"stats":{"num_tokens":35,"total_energy":32.3098950452797,"tokenization_energy":0.15289504528045655,"inference_energy":32.15699999999924,"energy_per_token":0.923139858436563,"time":0.6251022815704346,"components":{"ffn":7.926061061859132,"layernorm":0.13861912822723388,"output_layer":0.9216369123458863,"embeddings":0.12193196296691895,"attention":30.77844135141582}}},{"prompt":"\n                <｜begin▁of▁sentence｜><｜User｜>output only the code, no explanation: Write a function to find whether a given array of integers contains any duplicate element.<｜Assistant｜><think>\n                ","ground_truth_code":"def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ","generated_code":")\n\n</think> )\n\n\n\n\n\n\n the number.\n\n no explanation\n\n  a function that compute the a given und of integers contains at duplicate numbers. Return<think>\nOkay First","test_cases":["assert test_duplicate(([1,2,3,4,5]))==False","assert test_duplicate(([1,2,3,4, 4]))==True","assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"],"is_correct":false,"stats":{"total_energy":32.86230335044797,"tokenization_energy":0.13330335044860842,"inference_energy":32.72899999999936,"energy_per_token":0.995827374255999,"time":0.6189980506896973,"components":{"ffn":8.108929403543472,"layernorm":0.1406148805618286,"output_layer":0.9326461286544799,"embeddings":0.1330059642791748,"attention":36.69019992184575},"num_tokens":33}},{"is_correct":false,"stats":{"time":0.6156504154205322,"components":{"ffn":6.807409395694732,"layernorm":0.1342095251083374,"output_layer":0.7087804226875305,"embeddings":0.1348234519958496,"attention":35.292045936106184},"num_tokens":32,"total_energy":31.73827820873115,"tokenization_energy":0.138278208732605,"inference_energy":31.599999999998545,"energy_per_token":0.9918211940228484},"prompt":"\n                <｜begin▁of▁sentence｜><｜User｜>output only the code, no explanation: Write a function to check if the given number is woodball or not.<｜Assistant｜><think>\n                ","ground_truth_code":"def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False","generated_code":")\n\n</think> )\n\n\n\n\n\n\n the number.\n\n no explanation\n\n  a function that compute if a number string is a or number not.\n\n Return<think>\nOkay Okay","test_cases":["assert is_woodall(383) == True","assert is_woodall(254) == False","assert is_woodall(200) == False"]}]}},"_timestamp":1.7465874412238731e+09,"_runtime":35.088728017,"_step":0,"_wandb":{"runtime":35}}